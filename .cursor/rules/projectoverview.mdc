---
description: 
globs: 
alwaysApply: true
---
# Cursor Implementation Guide: Property Management Portal

This guide provides a step-by-step implementation plan for your property management portal, optimized for Cursor's AI capabilities. Since you've already set up the database and project structure, we'll focus on implementing the API endpoints efficiently.

## Preliminary Setup

First, ensure your environment is properly configured:

```bash
# Check your existing setup
ls -la

# Verify .env file has all required variables
cat .env | grep -v '^#' | grep .

# Install dependencies if not already done
pip install -r requirements.txt
```

## Implementation Strategy

We'll use a systematic approach to implement all endpoints:

1. First, complete core configuration files
2. Implement models and schemas
3. Set up repositories for database access
4. Create service layer for business logic
5. Implement API endpoints in logical groups
6. Add tests for critical functionality

## Core File Implementation

Let's start by implementing the essential core files:

### 1. Complete `app/core/config/settings.py`

```cursor
# Cursor: Implement the Settings class as shown below
file: app/core/config/settings.py

from pydantic_settings import BaseSettings
from typing import Optional, List
import os
from pathlib import Path

class Settings(BaseSettings):
    API_V1_PREFIX: str = "/api"
    PROJECT_NAME: str = "Property Management Portal"
    DEBUG: bool = True
    
    # Security
    SECRET_KEY: str
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60
    REFRESH_TOKEN_EXPIRE_DAYS: int = 7
    
    # Supabase
    SUPABASE_URL: str
    SUPABASE_KEY: str
    SUPABASE_SERVICE_ROLE_KEY: Optional[str] = None
    
    # Database
    DATABASE_URL: str
    
    class Config:
        env_file = ".env"
        case_sensitive = True

settings = Settings()
```

### 2. Set Up Database Connection

```cursor
# Cursor: Implement the database session
file: app/db/session.py

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from app.core.config.settings import settings

engine = create_async_engine(
    settings.DATABASE_URL,
    echo=settings.DEBUG,
    future=True,
)

AsyncSessionLocal = sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False,
)

async def get_db():
    async with AsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()
```

### 3. Implement Base Models

```cursor
# Cursor: Implement base models for SQLAlchemy
file: app/models/base.py

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, TIMESTAMP, func
from sqlalchemy.dialects.postgresql import UUID
import uuid

Base = declarative_base()

class TimestampMixin:
    created_at = Column(TIMESTAMP(timezone=True), server_default=func.now(), nullable=False)
    updated_at = Column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)

class UUIDMixin:
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
```

### 4. Set Up Security

```cursor
# Cursor: Implement authentication utilities
file: app/core/security/auth.py

from datetime import datetime, timedelta
from typing import Any, Union, Optional
from jose import jwt
from passlib.context import CryptContext
from app.core.config.settings import settings

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def create_access_token(subject: Union[str, Any], expires_delta: Optional[timedelta] = None) -> str:
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    
    to_encode = {"exp": expire, "sub": str(subject)}
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm="HS256")
    return encoded_jwt

def create_refresh_token(subject: Union[str, Any]) -> str:
    expire = datetime.utcnow() + timedelta(days=settings.REFRESH_TOKEN_EXPIRE_DAYS)
    to_encode = {"exp": expire, "sub": str(subject), "type": "refresh"}
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm="HS256")
    return encoded_jwt

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)
```

### 5. Set Up Supabase Client

```cursor
# Cursor: Implement Supabase client
file: app/db/supabase.py

from supabase import create_client, Client
from app.core.config.settings import settings

def get_supabase_client() -> Client:
    return create_client(settings.SUPABASE_URL, settings.SUPABASE_KEY)

supabase = get_supabase_client()
```

## Implementing Models

Let's implement the key models that correspond to our database tables:

### 6. User Model

```cursor
# Cursor: Implement User model
file: app/models/user.py

from sqlalchemy import Column, String, Boolean, Enum
from sqlalchemy.dialects.postgresql import UUID
import enum
from app.models.base import Base, TimestampMixin, UUIDMixin

class UserRole(enum.Enum):
    owner = "owner"
    tenant = "tenant"
    maintenance = "maintenance"
    admin = "admin"

class UserStatus(enum.Enum):
    active = "active"
    inactive = "inactive"
    pending = "pending"

class User(Base, UUIDMixin, TimestampMixin):
    __tablename__ = "users"
    
    email = Column(String, unique=True, index=True, nullable=False)
    password_hash = Column(String, nullable=False)
    first_name = Column(String, nullable=False)
    last_name = Column(String, nullable=False)
    phone = Column(String)
    role = Column(Enum(UserRole), nullable=False)
    profile_picture_url = Column(String)
    email_verified = Column(Boolean, default=False)
    status = Column(Enum(UserStatus), default=UserStatus.active)
    last_login_at = Column(String)
```

### 7. Property Model

```cursor
# Cursor: Implement Property model
file: app/models/property.py

from sqlalchemy import Column, String, Integer, ForeignKey, Numeric, Text
from sqlalchemy.dialects.postgresql import UUID, ARRAY
from sqlalchemy.orm import relationship
from app.models.base import Base, TimestampMixin, UUIDMixin

class PropertyStatus(enum.Enum):
    active = "active"
    inactive = "inactive"
    deleted = "deleted"

class Property(Base, UUIDMixin, TimestampMixin):
    __tablename__ = "properties"
    
    owner_id = Column(UUID(as_uuid=True), ForeignKey("users.id"), nullable=False)
    name = Column(String, nullable=False)
    street = Column(String, nullable=False)
    city = Column(String, nullable=False)
    state = Column(String, nullable=False)
    zip = Column(String, nullable=False)
    country = Column(String, default="USA")
    latitude = Column(Numeric(10, 8))
    longitude = Column(Numeric(11, 8))
    property_type = Column(String, nullable=False)
    year_built = Column(Integer)
    total_units = Column(Integer, nullable=False)
    amenities = Column(ARRAY(Text), default=[])
    description = Column(Text)
    status = Column(Enum(PropertyStatus), default=PropertyStatus.active)
    tax_id = Column(String)
```

### 8. Unit Model

```cursor
# Cursor: Implement Unit model
file: app/models/unit.py

from sqlalchemy import Column, String, Integer, ForeignKey, Numeric, Text, Enum
from sqlalchemy.dialects.postgresql import UUID, ARRAY
from sqlalchemy.orm import relationship
import enum
from app.models.base import Base, TimestampMixin, UUIDMixin

class UnitStatus(enum.Enum):
    available = "available"
    occupied = "occupied"
    maintenance = "maintenance"
    reserved = "reserved"
    inactive = "inactive"

class Unit(Base, UUIDMixin, TimestampMixin):
    __tablename__ = "units"
    
    property_id = Column(UUID(as_uuid=True), ForeignKey("properties.id"), nullable=False)
    unit_number = Column(String, nullable=False)
    floor = Column(Integer)
    bedrooms = Column(Numeric(3, 1), nullable=False)
    bathrooms = Column(Numeric(3, 1), nullable=False)
    square_feet = Column(Integer, nullable=False)
    rent_amount = Column(Numeric(10, 2), nullable=False)
    security_deposit = Column(Numeric(10, 2), nullable=False)
    status = Column(Enum(UnitStatus), default=UnitStatus.available)
    amenities = Column(ARRAY(Text), default=[])
    description = Column(Text)
```

## Implement Pydantic Schemas

Now let's create the Pydantic schemas for request/response validation:

### 9. User Schema

```cursor
# Cursor: Implement User schema
file: app/schemas/user.py

from pydantic import BaseModel, EmailStr, field_validator
from typing import Optional
from datetime import datetime
from uuid import UUID
from enum import Enum

class UserRole(str, Enum):
    owner = "owner"
    tenant = "tenant"
    maintenance = "maintenance"
    admin = "admin"

class UserStatus(str, Enum):
    active = "active"
    inactive = "inactive"
    pending = "pending"

# Shared properties
class UserBase(BaseModel):
    email: Optional[EmailStr] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    phone: Optional[str] = None
    role: Optional[UserRole] = None
    profile_picture_url: Optional[str] = None
    status: Optional[UserStatus] = None

# Properties to receive via API on creation
class UserCreate(BaseModel):
    email: EmailStr
    password: str
    first_name: str
    last_name: str
    phone: Optional[str] = None
    role: UserRole

    @field_validator('password')
    def password_must_be_strong(cls, v):
        if len(v) < 8:
            raise ValueError('Password must be at least 8 characters')
        return v

# Properties to receive via API on update
class UserUpdate(UserBase):
    password: Optional[str] = None

# Properties shared by models stored in DB
class UserInDBBase(UserBase):
    user_id: UUID
    email_verified: bool
    created_at: datetime
    updated_at: datetime
    
    class Config:
        from_attributes = True

# Additional properties to return via API
class User(UserInDBBase):
    pass

# Additional properties stored in DB
class UserInDB(UserInDBBase):
    password_hash: str
```

### 10. Token Schema

```cursor
# Cursor: Implement Token schema
file: app/schemas/token.py

from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class Token(BaseModel):
    access_token: str
    refresh_token: str
    token_type: str = "bearer"

class TokenPayload(BaseModel):
    sub: str
    exp: datetime
    type: Optional[str] = None
```

### 11. Property Schema

```cursor
# Cursor: Implement Property schema
file: app/schemas/property.py

from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime
from uuid import UUID

# Shared properties
class PropertyBase(BaseModel):
    name: Optional[str] = None
    street: Optional[str] = None
    city: Optional[str] = None
    state: Optional[str] = None
    zip: Optional[str] = None
    country: Optional[str] = "USA"
    property_type: Optional[str] = None
    year_built: Optional[int] = None
    total_units: Optional[int] = None
    amenities: Optional[List[str]] = None
    description: Optional[str] = None

# Properties to receive on property creation
class PropertyCreate(PropertyBase):
    name: str
    street: str
    city: str
    state: str
    zip: str
    property_type: str
    total_units: int
    
# Properties to receive on property update
class PropertyUpdate(PropertyBase):
    pass

# Properties shared by models stored in DB
class PropertyInDBBase(PropertyBase):
    property_id: UUID
    owner_id: UUID
    status: str
    created_at: datetime
    updated_at: datetime
    
    class Config:
        from_attributes = True

# Properties to return to client
class Property(PropertyInDBBase):
    pass

# Property with additional information
class PropertyWithDetails(Property):
    available_units: int
    occupied_units: int
    images: List[str] = []
```

## Implement Repositories

Let's create repository classes for database access:

### 12. User Repository

```cursor
# Cursor: Implement User repository
file: app/db/repositories/user_repository.py

from typing import Optional, List
from uuid import UUID
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, delete
from app.models.user import User
from app.core.security.auth import get_password_hash, verify_password

class UserRepository:
    def __init__(self, db: AsyncSession):
        self.db = db
    
    async def create(self, user_data: dict) -> User:
        # Hash password if present
        if "password" in user_data:
            user_data["password_hash"] = get_password_hash(user_data.pop("password"))
        
        db_user = User(**user_data)
        self.db.add(db_user)
        await self.db.commit()
        await self.db.refresh(db_user)
        return db_user
    
    async def get_by_id(self, user_id: UUID) -> Optional[User]:
        result = await self.db.execute(select(User).where(User.id == user_id))
        return result.scalars().first()
    
    async def get_by_email(self, email: str) -> Optional[User]:
        result = await self.db.execute(select(User).where(User.email == email))
        return result.scalars().first()
    
    async def list(self, skip: int = 0, limit: int = 100, role: Optional[str] = None) -> List[User]:
        query = select(User)
        if role:
            query = query.where(User.role == role)
        query = query.offset(skip).limit(limit)
        result = await self.db.execute(query)
        return result.scalars().all()
    
    async def update(self, user_id: UUID, user_data: dict) -> Optional[User]:
        # Hash password if present
        if "password" in user_data:
            user_data["password_hash"] = get_password_hash(user_data.pop("password"))
            
        await self.db.execute(
            update(User).where(User.id == user_id).values(**user_data)
        )
        await self.db.commit()
        return await self.get_by_id(user_id)
    
    async def delete(self, user_id: UUID) -> None:
        await self.db.execute(delete(User).where(User.id == user_id))
        await self.db.commit()
    
    async def authenticate(self, email: str, password: str) -> Optional[User]:
        user = await self.get_by_email(email)
        if not user or not verify_password(password, user.password_hash):
            return None
        return user
```

### 13. Property Repository

```cursor
# Cursor: Implement Property repository
file: app/db/repositories/property_repository.py

from typing import Optional, List, Dict, Any
from uuid import UUID
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, delete, func, case
from app.models.property import Property
from app.models.unit import Unit

class PropertyRepository:
    def __init__(self, db: AsyncSession):
        self.db = db
    
    async def create(self, property_data: dict) -> Property:
        db_property = Property(**property_data)
        self.db.add(db_property)
        await self.db.commit()
        await self.db.refresh(db_property)
        return db_property
    
    async def get_by_id(self, property_id: UUID) -> Optional[Property]:
        result = await self.db.execute(select(Property).where(Property.id == property_id))
        return result.scalars().first()
    
    async def list(self, 
                  owner_id: Optional[UUID] = None, 
                  skip: int = 0, 
                  limit: int = 100,
                  city: Optional[str] = None,
                  state: Optional[str] = None,
                  property_type: Optional[str] = None) -> List[Property]:
        query = select(Property)
        
        if owner_id:
            query = query.where(Property.owner_id == owner_id)
        
        if city:
            query = query.where(Property.city.ilike(f"%{city}%"))
        
        if state:
            query = query.where(Property.state == state)
            
        if property_type:
            query = query.where(Property.property_type == property_type)
            
        query = query.offset(skip).limit(limit)
        result = await self.db.execute(query)
        return result.scalars().all()
    
    async def update(self, property_id: UUID, property_data: dict) -> Optional[Property]:
        await self.db.execute(
            update(Property).where(Property.id == property_id).values(**property_data)
        )
        await self.db.commit()
        return await self.get_by_id(property_id)
    
    async def delete(self, property_id: UUID) -> None:
        await self.db.execute(delete(Property).where(Property.id == property_id))
        await self.db.commit()
        
    async def get_with_unit_stats(self, property_id: UUID) -> Optional[Dict[str, Any]]:
        property_obj = await self.get_by_id(property_id)
        if not property_obj:
            return None
            
        # Get unit statistics
        result = await self.db.execute(
            select(
                func.count(Unit.id).label("total_units"),
                func.sum(case((Unit.status == "available", 1), else_=0)).label("available_units"),
                func.sum(case((Unit.status == "occupied", 1), else_=0)).label("occupied_units")
            ).where(Unit.property_id == property_id)
        )
        
        stats = result.first()
        
        # Convert SQLAlchemy object to dict
        property_dict = {
            "property_id": property_obj.id,
            "name": property_obj.name,
            "street": property_obj.street,
            "city": property_obj.city,
            "state": property_obj.state,
            "zip": property_obj.zip,
            "country": property_obj.country,
            "property_type": property_obj.property_type,
            "year_built": property_obj.year_built,
            "total_units": property_obj.total_units,
            "amenities": property_obj.amenities,
            "description": property_obj.description,
            "status": property_obj.status.value,
            "tax_id": property_obj.tax_id,
            "owner_id": property_obj.owner_id,
            "created_at": property_obj.created_at,
            "updated_at": property_obj.updated_at,
            "available_units": stats.available_units if stats.available_units else 0,
            "occupied_units": stats.occupied_units if stats.occupied_units else 0,
            "images": []  # Placeholder for property images
        }
        
        return property_dict
```

## Implement Dependencies

### 14. Auth Dependencies

```cursor
# Cursor: Implement authentication dependencies
file: app/api/dependencies/auth.py

from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import jwt, JWTError
from pydantic import ValidationError
from sqlalchemy.ext.asyncio import AsyncSession
from app.core.config.settings import settings
from app.db.session import get_db
from app.db.repositories.user_repository import UserRepository
from app.schemas.token import TokenPayload
from app.models.user import UserRole
from typing import Optional
from uuid import UUID

oauth2_scheme = OAuth2PasswordBearer(tokenUrl=f"{settings.API_V1_PREFIX}/auth/login")

async def get_current_user(
    db: AsyncSession = Depends(get_db), token: str = Depends(oauth2_scheme)
):
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
        token_data = TokenPayload(**payload)
    except (JWTError, ValidationError):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Could not validate credentials",
        )
    
    user_repo = UserRepository(db)
    user = await user_repo.get_by_id(UUID(token_data.sub))
    
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="User not found",
        )
    return user

async def get_current_active_user(current_user = Depends(get_current_user)):
    if current_user.status != "active":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Inactive user",
        )
    return current_user

def check_role(allowed_roles: list[UserRole]):
    async def _check_role(current_user = Depends(get_current_active_user)):
        if current_user.role not in allowed_roles:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail=f"User does not have required permissions",
            )
        return current_user
    return _check_role

# Role-specific dependencies
get_current_admin = check_role([UserRole.admin])
get_current_owner = check_role([UserRole.owner, UserRole.admin])
get_current_maintenance = check_role([UserRole.maintenance, UserRole.admin])
```

## Implement API Endpoints

### 15. Auth Endpoints

```cursor
# Cursor: Implement authentication endpoints
file: app/api/endpoints/auth.py

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from datetime import timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from jose import jwt, JWTError
from app.schemas.token import Token, TokenPayload
from app.schemas.user import User, UserCreate
from app.core.security.auth import create_access_token, create_refresh_token
from app.db.session import get_db
from app.db.repositories.user_repository import UserRepository
from app.api.dependencies.auth import get_current_active_user
from app.core.config.settings import settings
from uuid import UUID

router = APIRouter()

@router.post("/register", response_model=User, status_code=status.HTTP_201_CREATED)
async def register_user(
    user_in: UserCreate, db: AsyncSession = Depends(get_db)
):
    user_repo = UserRepository(db)
    existing_user = await user_repo.get_by_email(user_in.email)
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already registered",
        )
    
    user_data = user_in.dict()
    created_user = await user_repo.create(user_data)
    return created_user

@router.post("/login", response_model=Token)
async def login(
    db: AsyncSession = Depends(get_db),
    form_data: OAuth2PasswordRequestForm = Depends(),
):
    user_repo = UserRepository(db)
    user = await user_repo.authenticate(form_data.username, form_data.password)
    
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
        )
    
    if user.status != "active":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Inactive user",
        )
    
    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    
    return {
        "access_token": create_access_token(user.id, expires_delta=access_token_expires),
        "refresh_token": create_refresh_token(user.id),
        "token_type": "bearer",
    }

@router.post("/refresh", response_model=Token)
async def refresh_token(
    token: str, db: AsyncSession = Depends(get_db)
):
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
        token_data = TokenPayload(**payload)
        
        if token_data.type != "refresh":
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid token type",
            )
            
    except (JWTError, ValidationError):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token",
        )
    
    user_repo = UserRepository(db)
    user = await user_repo.get_by_id(UUID(token_data.sub))
    
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="User not found",
        )
    
    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    
    return {
        "access_token": create_access_token(user.id, expires_delta=access_token_expires),
        "refresh_token": create_refresh_token(user.id),
        "token_type": "bearer",
    }

@router.post("/logout")
async def logout(current_user: User = Depends(get_current_active_user)):
    # In a real-world scenario, you might want to blacklist the token
    # For simplicity, we'll just return a success message
    return {"message": "Successfully logged out"}
```

### 16. User Endpoints

```cursor
# Cursor: Implement user endpoints
file: app/api/endpoints/users.py

from fastapi import APIRouter, Depends, HTTPException, status, Query
from typing import List, Optional
from uuid import UUID
from sqlalchemy.ext.asyncio import AsyncSession
from app.db.session import get_db
from app.schemas.user import User, UserCreate, UserUpdate
from app.db.repositories.user_repository import UserRepository
from app.api.dependencies.auth import get_current_active_user, get_current_admin

router = APIRouter()

@router.get("", response_model=List[User])
async def list_users(
    db: AsyncSession = Depends(get_db),
    current_user = Depends(get_current_admin),  # Only admins can list users
    skip: int = 0,
    limit: int = 100,
    role: Optional[str] = None
):
    user_repo = UserRepository(db)
    users = await user_repo.list(skip=skip, limit=limit, role=role)
    return users

@router.get("/me", response_model=User)
async def read_current_user(
    current_user = Depends(get_current_active_user)
):
    return current_user

@router.put("/me", response_model=User)
async def update_current_user(
    user_in: UserUpdate,
    db: AsyncSession = Depends(get_db),
    current_user = Depends(get_current_active_user)
):
    user_repo = UserRepository(db)
    user_data = user_in.dict(exclude_unset=True)
    
    # Prevent users from changing their own role
    if "role" in user_data and current_user.role != "admin":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Cannot change own role",
        )
    
    updated_user = await user_repo.update(current_user.id, user_data)
    return updated_user

@router.get("/{user_id}", response_model=User)
async def read_user(
    user_id: UUID,
    db: AsyncSession = Depends(get_db),
    current_user = Depends(get_current_admin)  # Only admins can see user details
):
    user_repo = UserRepository(db)
    user = await user_repo.get_by_id(user_id)
    
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )
    
    return user

@router.put("/{user_id}", response_model=User)
async def update_user(
    user_id: UUID,
    user_in: UserUpdate,
    db: AsyncSession = Depends(get_db),
    current_user = Depends(get_current_admin)  # Only admins can update users
):
    user_repo = UserRepository(db)
    user = await user_repo.get_by_id(user_id)
    
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )
    
    user_data = user_in.dict(exclude_unset=True)
    updated_user = await user_repo.update(user_id, user_data)
    return updated_user

@router.delete("/{user_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_user(
    user_id: UUID,
    db: AsyncSession = Depends(get_db),
    current_user = Depends(get_current_admin)  # Only admins can delete users
):
    user_repo = UserRepository(db)
    user = await user_repo.get_by_id(user_id)
    
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )
    
    # Instead of hard delete, set status to inactive
    await user_repo.update(user_id, {"status": "inactive"})
    return None
```

### 17. Property Endpoints

```cursor
# Cursor: Implement property endpoints
file: app/api/endpoints/properties.py

from fastapi import APIRouter, Depends, HTTPException, status, Query
from typing import List, Optional
from uuid import UUID
from sqlalchemy.ext.asyncio import AsyncSession
from app.db.session import get_db
from app.schemas.property import Property, PropertyCreate, PropertyUpdate, PropertyWithDetails
from app.db.repositories.property_repository import PropertyRepository
from app.api.dependencies.auth import get_current_active_user, get_current_owner, get_current_admin

router = APIRouter()

@router.post("", response_model=Property, status_code=status.HTTP_201_CREATED)
async def create_property(
    property_in: PropertyCreate,
    db: AsyncSession = Depends(get_db),
    current_user = Depends(get_current_owner)
):
    property_data = property_in.dict()
    property_data["owner_id"] = current_user.id
    
    property_repo = PropertyRepository(db)
    created_property = await property_repo.create(property_data)
    return created_property

@router.get("", response_model=List[Property])
async def list_properties(
    db: AsyncSession = Depends(get_db),
    current_user = Depends(get_current_active_user),
    skip: int = 0,
    limit: int = 100,
    city: Optional[str] = None,
    state: Optional[str] = None,
    property_type: Optional[str] = None
):
    property_repo = PropertyRepository(db)
    
    # Filter properties based on user role
    if current_user.role == "admin":
        # Admins can see all properties
        properties = await property_repo.list(
            skip=skip, limit=limit, city=city, state=state, property_type=property_type
        )
    elif current_user.role == "owner":
        # Owners can only see their properties
        properties = await property_repo.list(
            owner_id=current_user.id, skip=skip, limit=limit, 
            city=city, state=state, property_type=property_type
        )
    elif current_user.role == "maintenance":
        # Maintenance users need to see properties they're assigned to
        # This would need a more complex implementation with a maintenance-property relationship
        properties = []  # Placeholder
    else:
        # Tenants can only see properties they're renting
        # This would need a more complex implementation with tenant-lease-unit-property relationship
        properties = []  # Placeholder
        
    return properties

@router.get("/{property_id}", response_model=PropertyWithDetails)
async def get_property(
    property_id: UUID,
    db: AsyncSession = Depends(get_db),
    current_user = Depends(get_current_active_user)
):
    property_repo = PropertyRepository(db)
    property_with_stats = await property_repo.get_with_unit_stats(property_id)
    
    if not property_with_stats:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Property not found"
        )
    
    # Check if user has permission to access this property
    if current_user.role != "admin" and (
        (current_user.role == "owner" and property_with_stats["owner_id"] != current_user.id)
        # For tenant and maintenance, add proper checks
    ):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions to access this property"
        )
        
    return property_with_stats

@router.put("/{property_id}", response_model=Property)
async def update_property(
    property_id: UUID,
    property_in: PropertyUpdate,
    db: AsyncSession = Depends(get_db),
    current_user = Depends(get_current_owner)
):
    property_repo = PropertyRepository(db)
    db_property = await property_repo.get_by_id(property_id)
    
    if not db_property:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Property not found"
        )
    
    # Check if user is owner of the property or admin
    if current_user.role != "admin" and db_property.owner_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions to update this property"
        )
    
    property_data = property_in.dict(exclude_unset=True)
    updated_property = await property_repo.update(property_id, property_data)
    return updated_property

@router.delete("/{property_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_property(
    property_id: UUID,
    db: AsyncSession = Depends(get_db),
    current_user = Depends(get_current_owner)
):
    property_repo = PropertyRepository(db)
    db_property = await property_repo.get_by_id(property_id)
    
    if not db_property:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Property not found"
        )
    
    # Check if user is owner of the property or admin
    if current_user.role != "admin" and db_property.owner_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions to delete this property"
        )
    
    # Instead of hard delete, set status to deleted
    await property_repo.update(property_id, {"status": "deleted"})
    return None
```

### 18. API Router Setup

```cursor
# Cursor: Create API router setup
file: app/api/api.py

from fastapi import APIRouter
from app.api.endpoints import auth, users, properties

api_router = APIRouter()

api_router.include_router(auth.router, prefix="/auth", tags=["authentication"])
api_router.include_router(users.router, prefix="/users", tags=["users"])
api_router.include_router(properties.router, prefix="/properties", tags=["properties"])

# Add more routers as you implement them:
# api_router.include_router(units.router, prefix="/units", tags=["units"])
# api_router.include_router(leases.router, prefix="/leases", tags=["leases"])
# api_router.include_router(maintenance.router, prefix="/maintenance", tags=["maintenance"])
# ... and so on
```

### 19. Main Application

```cursor
# Cursor: Create main application file
file: app/main.py

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from app.api.api import api_router
from app.core.config.settings import settings
import uvicorn

app = FastAPI(
    title=settings.PROJECT_NAME,
    openapi_url=f"{settings.API_V1_PREFIX}/openapi.json",
    docs_url=f"{settings.API_V1_PREFIX}/docs",
    redoc_url=f"{settings.API_V1_PREFIX}/redoc",
)

# Set up CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Modify this in production!
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(api_router, prefix=settings.API_V1_PREFIX)

@app.get("/")
async def root():
    return {"message": "Welcome to the Property Management Portal API"}

if __name__ == "__main__":
    uvicorn.run("app.main:app", host="0.0.0.0", port=8000, reload=True)
```

## Next Steps and Testing

Once you've implemented these core components, you can:

1. Run the application:
```bash
uvicorn app.main:app --reload
```

2. Access the API documentation at:
- Swagger UI: http://localhost:8000/api/docs
- ReDoc: http://localhost:8000/api/redoc

3. Continue implementing the remaining endpoints following the same pattern:
   - Create models and schemas
   - Implement repositories
   - Create API endpoints
   - Add to the API router

For a comprehensive implementation, you'll need to create similar files for Units, Leases, Maintenance, Payments, and all other entities in your system. The pattern shown above can be followed for each entity.

## Implementation Tips

When implementing the remaining endpoints:

1. Use a consistent pattern for all repository methods and endpoints
2. Implement proper error handling with appropriate HTTP status codes
3. Ensure all endpoints have appropriate access control
4. Add proper validation for request and response data
5. Keep business logic in the service layer when it becomes complex
6. Add custom exception handlers for better error responses
7. Implement proper logging for debugging and monitoring

By following this implementation guide, you should be able to quickly build out your property management portal API with minimal errors.